
syntax = "proto3";

package comm;

// Base error returned with every RPC response.
message Error {
  int32 error_code = 1;
  string error_msg = 2;
  int32 leader_id = 3;
}

message ClusterConfig {
  string cluster_id = 1;
  repeated NodeConfig node_config_list = 2;
  int32 leader_id = 3;
}

message NodeConfig {
  int32 id = 1;
  string host = 2;
  int32 port = 3;
}

// Value.
message Value {
  // This holds the offset of the message in the partition.
  int64 offset = 1;
  // This holds the timestamp when the message was written to the partition.
  int64 timestamp = 2;
  // Value.
  bytes value = 3;
}

message Topic {
  // Name of the topic.
  string topic_name = 1;
  // List of partition IDs associated with this topic.
  repeated int32 partition_ids = 2;
  // Time to live(in seconds) or retention policy for messages
  // in this topic.
  int32 ttl_seconds = 3;
}

message CreateTopicRequest {
  Topic topic = 1;
}

message CreateTopicResponse {
  Error error = 1;
}

message RemoveTopicRequest {
  string topic_name = 1;
}

message RemoveTopicResponse {
  Error error = 1;
}

message GetTopicRequest {
  string topic_name = 1;
}

message GetTopicResponse {
  Error error = 1;
  Topic topic = 3;
}

message GetAllTopicsRequest {
  string topic_name = 1;
}

message GetAllTopicsResponse {
  Error error = 1;
  repeated Topic topics = 3;
}

message PublishRequest {
  // Name of the topic.
  string topic_name = 1;
  // Partition where the given values must be appended.
  int32 partition_id = 2;
  // List of values to append to the partition.
  repeated bytes values = 3;
}

message PublishResponse {
  Error error = 1;
}

message RegisterSubscriberRequest {
  // Subscriber ID. Must be <= 256 characters.
  string subscriber_id = 1;
}

message RegisterSubscriberResponse {
  Error error = 1;
}

message SubscribeRequest {
  // Name of the topic. This is a compulsory parameter.
  string topic_name = 1;
  // Partition ID. This is a compulsory parameter.
  int32 partition_id = 2;
  // Batch size(number of messages) to fetch per scan RPC.
  // This is a compulsory parameter.
  int32 batch_size = 3;
  // Specifies the start offset from where the scan starts.
  // Defaults to 0.
  int64 start_offset = 4;
  // Filters messages such that only messages >= start_timestamp
  // are fetched.
  int64 start_timestamp = 5;
  // Filters messages such that only messages < end_timestamp are
  // fetched.
  int64 end_timestamp = 6;
  // Subscriber ID. This is a compulsory parameter.
  string subscriber_id = 7;
  // If True, start_offset - 1 is committed. Defaults to false.
  bool auto_commit = 9;
}

message SubscribeResponse {
  Error error = 1;
  // List of values.
  repeated Value values = 2;
  // The next offset to start scan from. If -1, it means that
  // the scan is complete.
  int64 next_offset = 3;
}

message CommitRequest {
  // Name of the topic. This is a compulsory parameter.
  string topic_name = 1;
  // Partition ID. This is a compulsory parameter.
  int32 partition_id = 2;
  // Subscriber ID. This is a compulsory parameter.
  string subscriber_id = 3;
  // Offset number. This is a compulsory parameter.
  int64 offset = 4;
}

message CommitResponse {
  Error error = 1;
}

message LastCommittedRequest {
  // Name of the topic. This is a compulsory parameter.
  string topic_name = 1;
  // Partition ID. This is a compulsory parameter.
  int32 partition_id = 2;
  // Subscriber ID. This is a compulsory parameter.
  string subscriber_id = 3;
}

message LastCommittedResponse {
  // Error.
  Error error = 1;
  // Last committed offset.
  int64 offset = 3;
}

message GetLeaderRequest {
  // Cluster ID.
  string cluster_id = 1;
}

message GetLeaderResponse {
  // Error.
  Error error = 1;
  // Leader configuration.
  NodeConfig leader_config = 2;
}

message GetClusterConfigRequest {
  // Cluster ID.
  string cluster_id = 1;
}

message GetClusterConfigResponse {
  // Error.
  Error error = 1;
  // Cluster configuration.
  ClusterConfig config = 2;
}


service EeylopsService{
  // Creates a new topic with eeylops. If the topic already exists,
  // returns KTopicAlreadyExists.
  //
  // If ttl_seconds is not provided, it defaults to 7 days.
  rpc CreateTopic(CreateTopicRequest) returns (CreateTopicResponse);

  // Removes a topic with eeylops. If the topic does not exist, KTopicNotFound
  // error code is returned.
  rpc RemoveTopic(RemoveTopicRequest) returns (RemoveTopicResponse);

  // Get a the requested topic. If the topic does not exist, KTopicNotFound
  // error code is returned.
  rpc GetTopic(GetTopicRequest) returns (GetTopicResponse);

  // Get a the requested topic. If the topic does not exist, KTopicNotFound
  // error code is returned.
  rpc GetAllTopics(GetAllTopicsRequest) returns (GetAllTopicsResponse);

  // Produce one or more messages to the given topic and partition.
  // Returns KTopicNotFound if the topic or partition was not found.
  rpc Produce(PublishRequest) returns (PublishResponse);

  // Publish produces one or more messages periodically using client side streaming.
  rpc Publish(stream PublishRequest) returns (PublishResponse);

  // Registers a subscriber.
  rpc RegisterSubscriber(stream RegisterSubscriberRequest) returns (RegisterSubscriberResponse);

  // Consume one or more messages from the given topic and partition.
  // Returns KTopicNotFound if the topic or partition was not found.
  rpc Consume(SubscribeRequest) returns (SubscribeResponse);

  // Subscribes to a topic and partition and consumes messages using server side streaming.
  rpc Subscribe(SubscribeRequest) returns (stream SubscribeResponse);

  // Commits the offset provided by the client. Future Subscribers can
  // directly start from the last committed offset of that Subscriber.
  rpc Commit(CommitRequest) returns (CommitResponse);

  // Fetches the last committed offset by the client.
  rpc GetLastCommitted(LastCommittedRequest) returns (LastCommittedResponse);

  // Fetches the node configuration of the leader for the given cluster_id.
  rpc GetLeader(GetLeaderRequest) returns (GetLeaderResponse);

  // Fetches the cluster configuration for the given cluster_id.
  rpc GetClusterConfig(GetClusterConfigRequest) returns (GetClusterConfigResponse);
}
